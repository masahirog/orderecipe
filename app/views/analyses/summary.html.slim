.col-md-12 style='background-color:#fffacd;border-radius:8px;padding:10px;margin-bottom:15px;'
  span style='' ミッション - 存在意義 -
  h4 style='margin:5px 0;font-weight:bold;' 食べる楽しさを全てのひとへ
  br
  span ビジョン - 理想像 -
  h4 style='margin:5px 0;font-weight:bold;' 「毎日の美味しいを支える」街一番のお惣菜店
  br
  span バリュー  - 行動指針 -
  h4 style='margin:5px 0;font-weight:bold;' 「CACHI」にこだわり続ける
  p 　Creative：創り出そう
  p 　Active：行動しよう
  p 　Communicate：伝えよう
  p 　Honesty：誠実でいよう
  p 　Impact：影響を与えよう

div style='margin-bottom:20px;'
  = form_tag summary_analyses_path, :method => 'get' do
    .clearfix
      label style='float:left;' 店舗選択
      ul style="list-style:none;float:left;"
        - @stores.each do |store|
          li style='float:left;margin-right:10px;'
            = check_box_tag "stores[#{store.id}]",true,params['stores'][store.id.to_s]
            = label_tag "stores[#{store.id}]",store.name
    .form-group
      = label_tag "add_event",' イベント売上も含める',style:'margin-right:20px;'
      = check_box_tag "add_event",true,params['add_event']

    div
      label style='float:left;margin-right:10px;' 表示期間
      = date_field_tag :from, params[:from], class:"form-control float-left",style:'width:200px;float:left;'
      div style="float:left;padding:8px;" 〜
      = date_field_tag :to, params[:to], class:"form-control",style:'width:200px;float:left;'
    = submit_tag "絞り込み" ,class:"btn btn-primary",style:"margin-left:20px;"
    = link_to '販売データ',analyses_path(from:params[:from],to:params[:to]),class:'btn btn-sm btn-primary pull-right'
h3 売上とロス
canvas#chart1
.table-responsive style='height:600px;overflow: scroll;'
  table.table.layout-fixed style='border-collapse:separate;'
    thead style='position: sticky;top:0;background-color:white;z-index:3;'
      tr
        th.text-center style="width:560px;" colspan=6
        - @stores.each do |store|
          th.text-center style="border-left: 1px solid #ddd;width:400px;" colspan=5 = store.name
      tr
        th style='width:160px;background-color:white;' 日付
        th style='width:80px;' 来客組数
        th style='width:80px;' 売上
        th style='width:80px;' 値引額
        th style='width:80px;' 廃棄金額
        th style='width:80px;' ロス率
        - @stores.each do |store|
          th style="width:80px;border-left: 1px solid #ddd;" 来客組数
          th style='width:80px;' 売上
          th style='width:80px;' 値引額
          th style='width:80px;' 廃棄金額
          th style='width:80px;' ロス率

    tbody
      - @dates.reverse_each do |date|
        tr
          td style='background-color:white;' = link_to date.strftime("%Y/%-m/%-d (#{%w(日 月 火 水 木 金 土)[date.wday]})"),date_analyses_path(date:date)
          td = @date_store_analyses[date].map{|hash|hash[1][:transaction_count]}.sum
          td = @date_store_analyses[date].map{|hash|hash[1][:sales_amount]}.sum.to_s(:delimited) if @date_store_analyses[date]
          td = @date_store_analyses[date].map{|hash|hash[1][:discount_amount].to_i}.sum.to_s(:delimited) if @date_store_analyses[date]
          td = @date_store_analyses[date].map{|hash|hash[1][:loss_amount].to_i}.sum.to_s(:delimited) if @date_store_analyses[date]
          td
            - if @date_store_analyses[date].map{|hash|hash[1][:loss_amount].to_i}.sum > 0 && @date_store_analyses[date].map{|hash|hash[1][:discount_amount].to_i}.sum > 0
              - loss = (((@date_store_analyses[date].map{|hash|hash[1][:loss_amount].to_i}.sum.to_f + @date_store_analyses[date].map{|hash|hash[1][:discount_amount].to_i}.sum.to_f)/@date_store_analyses[date].map{|hash|hash[1][:sales_amount]}.sum)*100).round(1)
              - if loss > 9 || loss < 4
                span style='color:red;' = "#{loss}%"
              - else
                span style='color:black;' = "#{loss}%"
          - @stores.each do |store|
            td style="border-left: 1px solid #ddd;"  = @date_store_analyses[date][store.id][:transaction_count] if @date_store_analyses[date][store.id][:transaction_count].present?
            td = @date_store_analyses[date][store.id][:sales_amount].to_s(:delimited) if @date_store_analyses[date][store.id][:sales_amount].present?
            td = @date_store_analyses[date][store.id][:discount_amount].to_s(:delimited) if @date_store_analyses[date][store.id][:discount_amount].present?
            td = @date_store_analyses[date][store.id][:loss_amount].to_s(:delimited) if @date_store_analyses[date][store.id][:loss_amount].present?
            td
              - if @date_store_analyses[date][store.id][:sales_amount].present? && @date_store_analyses[date][store.id][:loss_amount].present? && @date_store_analyses[date][store.id][:discount_amount].present?
                - loss = (((@date_store_analyses[date][store.id][:loss_amount].to_f + @date_store_analyses[date][store.id][:discount_amount].to_f)/@date_store_analyses[date][store.id][:sales_amount])*100).round(1)
                - if loss > 12 || loss < 8
                  span style='color:red;' = "#{loss}%"
                - else
                  span style='color:black;' = "#{loss}%"


javascript:
  // 1個目のグラフ
  var ctx = document.getElementById("chart1").getContext('2d');
  ctx.canvas.height = 80;
  var chart1 = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: gon.sales_dates,
      datasets: [{
        type: 'line',
        label: "廃棄率",
        data: gon.loss_data,
        backgroundColor: 'rgba(255, 99, 132, 0.7)',
        borderColor: 'rgba(255, 99, 132, 0.8)',
        fill: false,
        stacked: false,
        yAxisID: "y-axis-2",
        pointRadius: 0
      },{
        type: 'line',
        data: gon.loss_mokuhyo_data,
        backgroundColor: 'rgba(255,0,0,0.9)',
        borderColor: 'rgba(255,0,0,0.9)',
        fill: false,
        stacked: false,
        yAxisID: "y-axis-2",
        pointRadius: 0,
        borderWidth: 2
      },{
        type: 'bar',
        label: "売上",
        data: gon.sales_data,
        backgroundColor: 'rgba(54, 162, 235, 0.7)',
        borderColor: 'rgba(54, 162, 235, 0.7)',
        fill: false,
        stacked: false,
        yAxisID: "y-axis-1"
      }
    ]
    },
    options: {
      scales: {
        xAxes: [{
          stacked: true,
          scaleLabel: {
            display: true,
            fontSize: 16
          }
        }],
        yAxes: [{
          stacked: false,
          id: "y-axis-1",
          type: "linear",
          position: "right",
          ticks: {
            min: 0,
            callback: function(label, index, labels) {
              return label.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
            }
          }
        },{
          stacked: false,
          id: "y-axis-2",
          type: "linear",
          position: "left",
          ticks: {
            min: 0,
            callback: function(label, index, labels) {
              return label.toString() + "%";
            }
          }
        }]
      },
      legend: {
        labels:{
          filter: function(items) {
            return items.text != null;
          }
        }
      }
    }
  });
  // $(function () {
  //   const lat = gon.lat
  //   const lon = gon.lon
  //   const key = gon.api
  //   const weather_url = 'https://api.openweathermap.org/data/2.5/onecall?lat=' + lat + '&lon=' + lon + '&exclude=current,minutely,alerts&units=metric&appid=' + key;
  //   $.ajax({
  //       url: weather_url,
  //       dataType: 'json',
  //       type: 'GET',
  //     })
  //   .done(function (weather) {
  //     let insertHTML = '';
  //     for (let i = 0; i <= 7; i = i + 1) {
  //       insertHTML += buildHTML(weather, i);
  //     }
  //     $('#weather').html(insertHTML);
  //   })
  //   .fail(function (weather) {
  //     alert('天気予報の取得に失敗しました');
  //   });
  // });

  // 日本語で表示
  // function buildHTML(weather, i) {
  //   //日付、時間を取得（Dateがミリ秒なので1000倍が必要）
  //   const date = new Date(weather.daily[i].dt * 1000);
  //   //UTCとの時差を無くす(日本は-9時間のため9を足す)
  //   // date.setHours(date.getHours() + 9);
  //   //月を取得。getMonth()は0~11を返すため1を足すことによって1月~12月を返すように設定
  //   const month = date.getMonth() + 1;
  //   //曜日の日本語化のため、配列を用意する
  //   const Week = new Array('(日)', '(月)', '(火)', '(水)', '(木)', '(金)', '(土)');
  //   //月＋日＋曜日をdayに代入。getDay()は0~6を返すためWeek配列内のインデックスに対応した文字列を取得
  //   const day = month + '/' + date.getDate() + Week[date.getDay()];
  //   //天気のアイコンを取得
  //   const icon = weather.daily[i].weather[0].icon;
  //   //風速を取得
  //   var rain = 0;
  //   if (weather.daily[i].rain) {
  //     var rain = Math.round(weather.daily[i].rain);
  //   }
  //   var jpn_description = {"clear sky":"快晴","few clouds":"晴れ","scattered clouds":"くもり","broken clouds":"くもり","shower rain":"小雨","rain":"雨",
  //   "thunderstorm":"雷雨","snow":"雪","mist":"霧",
  //   'thunderstorm with light rain':'小雨で雷を伴う','thunderstorm with rain':'雷雨','thunderstorm with heavy rain':'強い雨で雷を伴う','light thunderstorm':'雷','thunderstorm':'雷雨',
  //   'heavy thunderstorm':'強い雷雨','ragged thunderstorm':'局地的雷雨','thunderstorm with light drizzle':'薄い霧で雷を伴う','thunderstorm with drizzle':'霧雨で雷を伴う',
  //   'thunderstorm with heavy drizzle':'濃い霧雨で雷を伴う','light intensity drizzle':'もや','drizzle':'霧','heavy intensity drizzle':'濃霧',
  //   'light intensity drizzle rain':'霧雨','drizzle rain':'小雨','heavy intensity drizzle rain':'濃霧の伴う雨','shower rain and drizzle':'霧所によりにわか雨',
  //   'heavy shower rain and drizzle':'霧所により強いにわか雨','shower drizzle':'にわか霧','light rain':'小雨','moderate rain':'雨',
  //   'heavy intensity rain':'やや強い雨','very heavy rain':'強い雨','extreme rain':'激しい雨','freezing rain':'冷たい雨','light intensity shower rain':'小雨',
  //   'shower rain':'にわか雨','heavy intensity shower rain':'強いにわか雨','ragged shower rain':'局地的にわか雨','light snow':'小雪','snow':'雪',
  //   'heavy snow':'大雪','sleet':'みぞれ','shower sleet':'にわかみぞれ','light rain and snow':'小雨所により雪','rain and snow':'雨所により雪','light shower snow':'にわか小雪',
  //   'shower snow':'にわか雪','heavy shower snow':'強いにわか雪','mist':'霧','smoke':'スモッグ','haze':'煙霧','sand, dust whirls':'黄砂','fog':'濃霧','sand':'黄砂','dust':'塵',
  //   'volcanic ash':'火山灰','squalls':'スコール','tornado':'竜巻','clear sky':'晴れ','few clouds':'晴れ所により曇り','scattered clouds':'曇り所により晴れ','broken clouds':'曇り時々晴れ',
  //   'overcast clouds':'曇り','tornado':'竜巻','tropical storm':'台風','hurricane':'ハリケーン','cold':'寒気','hot':'暖気','windy':'強風','hail':'ひょう',
  //   'calm':'無風','light breeze':'微風','gentle breeze':'そよ風','moderate breeze':'弱い風','fresh breeze':'やや強い風','strong breeze':'強い風',
  //   'high wind, near gale':'非常に強い風','gale':'強風注意報','severe gale':'海上風警報','storm':'強風警報','violent storm':'暴風警報','hurricane':'特別暴風警報'}

  //   const description = jpn_description[weather.daily[i].weather[0].description]
  //   const max_temp = Math.round(weather.daily[i].temp.max);
  //   const min_temp = Math.round(weather.daily[i].temp.min);
  //   const html =
  //     '<div class="weather__content--report" style="float:left;padding:5px 30px;">' +
  //       '<div class="weather__content--report-date">' + day + "</div>" +
  //       '<img src="https://openweathermap.org/img/w/' + icon + '.png">' +
  //       '<div class="weather__content--report-description" style="font-weight:bold;">' + description + "</div>" +
  //       '<div class="weather__content--report-date">最高：' + max_temp + "℃</div>" +
  //       '<div class="weather__content--report-date">最低：' + min_temp + "℃</div>" +
  //       '<div class="weather__content--report-rain">降水量：' + rain + "mm</div>" +
  //       // '<p class="weather__content--report-wind_speed">' + wind_speed + "m</p>" +
  //     '</div>';
  //   return html
  // }

css:
  .table-responsive th {
    white-space: nowrap;
  }
  table.layout-fixed {
    table-layout: fixed;
    border-collspace:separate;
  }
  .table th:first-child,td:first-child{
    position: sticky;
    left: 0;
    z-index:2;
  }
  th,td {
    font-size:0.9em;
    font-weight:normal;
    text-align:center;
  }
  .aaa{
    width:50px;
  }
